module {
    // __main__: ->
    func.func @__main__(%s0: !sigi.stack) -> !sigi.stack attributes {sigi.main} {
        %v1 = arith.constant 1: i32
        %s1 = sigi.push %s0, %v1: i32
        // -> x;
        %s2, %v2_x = sigi.pop %s1: i32 // x: int
        %s3 = sigi.push %s2, %v2_x: i32 // push x
        %s4 = sigi.push %s3, %v2_x: i32 // push x
        // +
        %s5, %v3 = sigi.pop %s4: i32
        %s6, %v4 = sigi.pop %s5: i32
        %v5 = arith.addi %v4, %v3: i32
        %s7 = sigi.push %s6, %v5: i32
        %s8, %v6 = sigi.pop %s7: i32 // pop intrinsic
        %s9 = sigi.push %s8, %v2_x: i32 // push x
        %s10 = sigi.push %s9, %v2_x: i32 // push x
        // -
        %s11, %v7 = sigi.pop %s10: i32
        %s12, %v8 = sigi.pop %s11: i32
        %v9 = arith.subi %v8, %v7: i32
        %s13 = sigi.push %s12, %v9: i32
        %s14, %v10 = sigi.pop %s13: i32 // pop intrinsic
        %s15 = sigi.push %s14, %v2_x: i32 // push x
        %s16 = sigi.push %s15, %v2_x: i32 // push x
        // *
        %s17, %v11 = sigi.pop %s16: i32
        %s18, %v12 = sigi.pop %s17: i32
        %v13 = arith.muli %v12, %v11: i32
        %s19 = sigi.push %s18, %v13: i32
        %s20, %v14 = sigi.pop %s19: i32 // pop intrinsic
        %s21 = sigi.push %s20, %v2_x: i32 // push x
        %s22 = sigi.push %s21, %v2_x: i32 // push x
        // /
        %s23, %v15 = sigi.pop %s22: i32
        %s24, %v16 = sigi.pop %s23: i32
        %v17 = arith.divi %v16, %v15: i32
        %s25 = sigi.push %s24, %v17: i32
        %s26, %v18 = sigi.pop %s25: i32 // pop intrinsic
        %s27 = sigi.push %s26, %v2_x: i32 // push x
        %s28 = sigi.push %s27, %v2_x: i32 // push x
        // %
        %s29, %v19 = sigi.pop %s28: i32
        %s30, %v20 = sigi.pop %s29: i32
        %v21 = arith.modi %v20, %v19: i32
        %s31 = sigi.push %s30, %v21: i32
        %s32, %v22 = sigi.pop %s31: i32 // pop intrinsic
        %s33 = sigi.push %s32, %v2_x: i32 // push x
        // unary_-
        %v23 = arith.constant 0: i32
        %s34, %v24 = sigi.pop %s33: i32
        %v25 = arith.subi %v23, %v24: i32
        %s35 = sigi.push %s34, %v25: i32
        %s36, %v26 = sigi.pop %s35: i32 // pop intrinsic
        %s37 = sigi.push %s36, %v2_x: i32 // push x
        %s38, %v27 = sigi.pop %s37: i32 // pop intrinsic
        %s39 = sigi.push %s38, %v2_x: i32 // push x
        // unary_~
        %v28 = arith.constant 1: i32
        %s40, %v29 = sigi.pop %s39: i32
        %v30 = arith.xori %v28, %v29: i32
        %s41 = sigi.push %s40, %v30: i32
        %s42, %v31 = sigi.pop %s41: i32 // pop intrinsic
        %s43 = sigi.push %s42, %v2_x: i32 // push x
        %s44 = sigi.push %s43, %v2_x: i32 // push x
        // <
        %s45, %v32 = sigi.pop %s44: i32
        %s46, %v33 = sigi.pop %s45: i32
        %v34 = arith.cmpi "slt", %v33, %v32: i32
        %s47 = sigi.push %s46, %v34: i1
        %s48, %v35 = sigi.pop %s47: i1 // pop intrinsic
        %s49 = sigi.push %s48, %v2_x: i32 // push x
        %s50 = sigi.push %s49, %v2_x: i32 // push x
        // >
        %s51, %v36 = sigi.pop %s50: i32
        %s52, %v37 = sigi.pop %s51: i32
        %v38 = arith.cmpi "sgt", %v37, %v36: i32
        %s53 = sigi.push %s52, %v38: i1
        %s54, %v39 = sigi.pop %s53: i1 // pop intrinsic
        %s55 = sigi.push %s54, %v2_x: i32 // push x
        %s56 = sigi.push %s55, %v2_x: i32 // push x
        // >=
        %s57, %v40 = sigi.pop %s56: i32
        %s58, %v41 = sigi.pop %s57: i32
        %v42 = arith.cmpi "sge", %v41, %v40: i32
        %s59 = sigi.push %s58, %v42: i1
        %s60, %v43 = sigi.pop %s59: i1 // pop intrinsic
        %s61 = sigi.push %s60, %v2_x: i32 // push x
        %s62 = sigi.push %s61, %v2_x: i32 // push x
        // <=
        %s63, %v44 = sigi.pop %s62: i32
        %s64, %v45 = sigi.pop %s63: i32
        %v46 = arith.cmpi "sle", %v45, %v44: i32
        %s65 = sigi.push %s64, %v46: i1
        %s66, %v47 = sigi.pop %s65: i1 // pop intrinsic
        %s67 = sigi.push %s66, %v2_x: i32 // push x
        %s68 = sigi.push %s67, %v2_x: i32 // push x
        // =
        %s69, %v48 = sigi.pop %s68: i32
        %s70, %v49 = sigi.pop %s69: i32
        %v50 = arith.cmpi "eq", %v49, %v48: i32
        %s71 = sigi.push %s70, %v50: i1
        %s72, %v51 = sigi.pop %s71: i1 // pop intrinsic
        %s73 = sigi.push %s72, %v2_x: i32 // push x
        %s74 = sigi.push %s73, %v2_x: i32 // push x
        // <>
        %s75, %v52 = sigi.pop %s74: i32
        %s76, %v53 = sigi.pop %s75: i32
        %v54 = arith.cmpi "ne", %v53, %v52: i32
        %s77 = sigi.push %s76, %v54: i1
        %s78, %v55 = sigi.pop %s77: i1 // pop intrinsic
        %v56 = sigi.constant "hello": !sigi.str
        %s79 = sigi.push %s78, %v56: !sigi.str
        // -> y;
        %s80, %v57_y = sigi.pop %s79: !sigi.str // y: str
        %s81 = sigi.push %s80, %v57_y: !sigi.str // push y
        %s82 = sigi.push %s81, %v57_y: !sigi.str // push y
        // &
        %s83, %v58 = sigi.pop %s82: !sigi.str
        %s84, %v59 = sigi.pop %s83: !sigi.str
        %v60 = sigi.concat_str %v59, %v58: !sigi.str
        %s85 = sigi.push %s84, %v60: !sigi.str
        %s86, %v61 = sigi.pop %s85: !sigi.str // pop intrinsic
        %v62 = arith.constant 1: i1
        %s87 = sigi.push %s86, %v62: i1
        // -> b;
        %s88, %v63_b = sigi.pop %s87: i1 // b: bool
        %s89 = sigi.push %s88, %v63_b: i1 // push b
        // unary_!
        %v64 = arith.constant 1: i1
        %s90, %v65 = sigi.pop %s89: i1
        %v66 = arith.xori %v64, %v65: i1
        %s91 = sigi.push %s90, %v66: i1
        %s92, %v67 = sigi.pop %s91: i1 // pop intrinsic
        return %s92: !sigi.stack
    }
}