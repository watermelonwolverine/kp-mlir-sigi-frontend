module {
    func.func private @"sigi::pp"(!sigi.stack) -> !sigi.stack attributes { sigi.builtinfunc }
    // apply: str, (str -> str) -> str
    func.func private @apply(%s0: !sigi.stack) -> !sigi.stack {
        // -> \f;
        %s1, %v1_f = sigi.pop %s0: !closure.box<(!sigi.stack) -> !sigi.stack> // f: (str -> str)
        %s2 = closure.call %v1_f (%s1) : !closure.box<(!sigi.stack) -> !sigi.stack> // call f: str -> str
        return %s2: !sigi.stack
    }
    // apply: (->) ->
    func.func private @"apply$2"(%s0: !sigi.stack) -> !sigi.stack {
        // -> \f;
        %s1, %v1_f = sigi.pop %s0: !closure.box<(!sigi.stack) -> !sigi.stack> // f: (->)
        %s2 = closure.call %v1_f (%s1) : !closure.box<(!sigi.stack) -> !sigi.stack> // call f: ->
        return %s2: !sigi.stack
    }
    // show: str ->
    func.func private @show(%s0: !sigi.stack) -> !sigi.stack {
        %s1 = func.call @"sigi::pp"(%s0) : (!sigi.stack) -> !sigi.stack // str -> str
        %s2, %v1 = sigi.pop %s1: !sigi.str // pop intrinsic
        return %s2: !sigi.stack
    }
    // helloworld0: ->
    func.func private @helloworld0(%s0: !sigi.stack) -> !sigi.stack {
        %v1 = sigi.constant "Hello ": !sigi.str
        %s1 = sigi.push %s0, %v1: !sigi.str
        %v2 = sigi.constant "World!": !sigi.str
        %s2 = sigi.push %s1, %v2: !sigi.str
        // &
        %s3, %v3 = sigi.pop %s2: !sigi.str
        %s4, %v4 = sigi.pop %s3: !sigi.str
        %v5 = sigi.concat_str %v4, %v3: !sigi.str
        %s5 = sigi.push %s4, %v5: !sigi.str
        %s6 = func.call @show(%s5) : (!sigi.stack) -> !sigi.stack // str ->
        return %s6: !sigi.stack
    }
    // helloworld1: ->
    func.func private @helloworld1(%s0: !sigi.stack) -> !sigi.stack {
        %v1 = sigi.constant "Hello ": !sigi.str
        %s1 = sigi.push %s0, %v1: !sigi.str
        %v2 = sigi.constant "World!": !sigi.str
        %s2 = sigi.push %s1, %v2: !sigi.str
        // &
        %s3, %v3 = sigi.pop %s2: !sigi.str
        %s4, %v4 = sigi.pop %s3: !sigi.str
        %v5 = sigi.concat_str %v4, %v3: !sigi.str
        %s5 = sigi.push %s4, %v5: !sigi.str
        %s6 = func.call @show(%s5) : (!sigi.stack) -> !sigi.stack // str ->
        return %s6: !sigi.stack
    }
    // helloworld2: ->
    func.func private @helloworld2(%s0: !sigi.stack) -> !sigi.stack {
        %v1 = sigi.constant "Hello ": !sigi.str
        %s1 = sigi.push %s0, %v1: !sigi.str
        %v2 = closure.box [] (%s2 : !sigi.stack) -> !sigi.stack { // str -> str
            %v3 = sigi.constant "World!": !sigi.str
            %s3 = sigi.push %s2, %v3: !sigi.str
            // &
            %s4, %v4 = sigi.pop %s3: !sigi.str
            %s5, %v5 = sigi.pop %s4: !sigi.str
            %v6 = sigi.concat_str %v5, %v4: !sigi.str
            %s6 = sigi.push %s5, %v6: !sigi.str
            closure.return %s6: !sigi.stack
        }
        %s7 = sigi.push %s1, %v2: !closure.box<(!sigi.stack) -> !sigi.stack>
        %s8 = func.call @apply(%s7) : (!sigi.stack) -> !sigi.stack // str, (str -> str) -> str
        %s9 = func.call @show(%s8) : (!sigi.stack) -> !sigi.stack // str ->
        return %s9: !sigi.stack
    }
    // concatWorld: str -> str
    func.func private @concatWorld(%s0: !sigi.stack) -> !sigi.stack {
        %v1 = sigi.constant "World!": !sigi.str
        %s1 = sigi.push %s0, %v1: !sigi.str
        // &
        %s2, %v2 = sigi.pop %s1: !sigi.str
        %s3, %v3 = sigi.pop %s2: !sigi.str
        %v4 = sigi.concat_str %v3, %v2: !sigi.str
        %s4 = sigi.push %s3, %v4: !sigi.str
        return %s4: !sigi.stack
    }
    // helloworld3: ->
    func.func private @helloworld3(%s0: !sigi.stack) -> !sigi.stack {
        %v1 = sigi.constant "Hello ": !sigi.str
        %s1 = sigi.push %s0, %v1: !sigi.str
        %s2 = func.call @concatWorld(%s1) : (!sigi.stack) -> !sigi.stack // str -> str
        %s3 = func.call @show(%s2) : (!sigi.stack) -> !sigi.stack // str ->
        return %s3: !sigi.stack
    }
    // helloworld4: str, int ->
    func.func private @helloworld4(%s0: !sigi.stack) -> !sigi.stack {
        // -> text, n;
        %s1, %v1_n = sigi.pop %s0: i32 // n: int
        %s2, %v2_text = sigi.pop %s1: !sigi.str // text: str
        %s3 = sigi.push %s2, %v1_n: i32 // push n
        %v3 = arith.constant 0: i32
        %s4 = sigi.push %s3, %v3: i32
        // =
        %s5, %v4 = sigi.pop %s4: i32
        %s6, %v5 = sigi.pop %s5: i32
        %v6 = arith.cmpi "eq", %v5, %v4: i32
        %s7 = sigi.push %s6, %v6: i1
        %v7 = closure.box [] (%s8 : !sigi.stack) -> !sigi.stack { // ->
            closure.return %s8: !sigi.stack
        }
        %s9 = sigi.push %s7, %v7: !closure.box<(!sigi.stack) -> !sigi.stack>
        %v10 = closure.box [%v8_text = %v2_text : !sigi.str, %v9_n = %v1_n : i32] (%s10 : !sigi.stack) -> !sigi.stack { // ->
            %s11 = sigi.push %s10, %v8_text: !sigi.str // push text
            %s12 = func.call @"sigi::pp"(%s11) : (!sigi.stack) -> !sigi.stack // str -> str
            %s13 = sigi.push %s12, %v9_n: i32 // push n
            %v11 = arith.constant 1: i32
            %s14 = sigi.push %s13, %v11: i32
            // -
            %s15, %v12 = sigi.pop %s14: i32
            %s16, %v13 = sigi.pop %s15: i32
            %v14 = arith.subi %v13, %v12: i32
            %s17 = sigi.push %s16, %v14: i32
            %s18 = func.call @helloworld4(%s17) : (!sigi.stack) -> !sigi.stack // str, int ->
            closure.return %s18: !sigi.stack
        }
        %s19 = sigi.push %s9, %v10: !closure.box<(!sigi.stack) -> !sigi.stack>
        %s20, %v15 = sigi.pop %s19: !closure.box<(!sigi.stack) -> !sigi.stack>
        %s21, %v16 = sigi.pop %s20: !closure.box<(!sigi.stack) -> !sigi.stack>
        %s22, %v17 = sigi.pop %s21: i1
        
        %v18 = scf.if %v17 -> !closure.box<(!sigi.stack) -> !sigi.stack> {
          scf.yield %v16: !closure.box<(!sigi.stack) -> !sigi.stack>
        } else {
          scf.yield %v15: !closure.box<(!sigi.stack) -> !sigi.stack>
        }
        %s23 = sigi.push %s22, %v18: !closure.box<(!sigi.stack) -> !sigi.stack>
        %s24 = func.call @"apply$2"(%s23) : (!sigi.stack) -> !sigi.stack // (->) ->
        return %s24: !sigi.stack
    }
    // __main__: ->
    func.func @__main__(%s0: !sigi.stack) -> !sigi.stack attributes {sigi.main} {
        %s1 = func.call @helloworld0(%s0) : (!sigi.stack) -> !sigi.stack // ->
        %s2 = func.call @helloworld1(%s1) : (!sigi.stack) -> !sigi.stack // ->
        %s3 = func.call @helloworld2(%s2) : (!sigi.stack) -> !sigi.stack // ->
        %s4 = func.call @helloworld3(%s3) : (!sigi.stack) -> !sigi.stack // ->
        %v1 = sigi.constant "Hello World!": !sigi.str
        %s5 = sigi.push %s4, %v1: !sigi.str
        %v2 = arith.constant 3: i32
        %s6 = sigi.push %s5, %v2: i32
        %s7 = func.call @helloworld4(%s6) : (!sigi.stack) -> !sigi.stack // str, int ->
        return %s7: !sigi.stack
    }
}